;; #-*- mode: nendo; syntax: scheme -*-;;
;; specfile util functions

(use rfc.yaml)

;; create specfile as yaml.
;; stow-home: stow home path.
;; url: url arg must be validated.
;; return
;; ("yamlfile image"
;;  (( "filename of shellscript" . "shellscript image"))
;; )
(define (create-specfile stow-home url)
  (let* ([parsed (stowm-parse-url url)]
         [fetchable (not (eq? 'empty (scheme-type parsed)))]
         [tree
          `(
            ("fetch" . ,(if fetchable
                            (sprintf "wget %s -O %s" url (filename parsed))
                            #f))
            ("configure" . ,(sprintf "configure --prefix=%s/%s"
                                     stow-home
                                     (package parsed)))
            ("make" . "make")
            ("install" . "make install")
            ("url" . ,url)
            ("filename" . ,(filename parsed))
            ("projname" . ,(package parsed)))])
    
    (construct-yaml-string tree)))

;; load specfile
;; path : full path of specfile.yml
(define (load-specfile path)
  (with-open
   path
   (lambda (f)
     (parse-yaml f))))


;; spec object to Makefile string
;; spec-obj : loaded data of specfile.yml
(define (create-makefile spec-obj home-repos)
  (let* ([fetch (assv-ref "fetch" spec-obj)]
         [filename (assv-ref "filename" spec-obj)]
         [projname (assv-ref "projname" spec-obj)]
         [strings
          (list
           (sprintf "all: %s/configure\n	cd ./%s && %s && %s && %s"
                    projname
                    projname
                    (assv-ref "configure" spec-obj)
                    (assv-ref "make" spec-obj)
                    (assv-ref "install" spec-obj))
           (sprintf "%s/configure : %s\n	tar zxf %s\n	touch %s/configure"
                    projname
                    filename
                    filename
                    projname)
           (if fetch
               (sprintf "%s :\n	%s"
                        filename
                        fetch)
               (sprintf "%s :\n	/bin/cp %s/%s/%s %s"
                        filename
                        home-repos
                        projname
                        filename
                        filename))
           (sprintf "clean:\n	/bin/rm -f ./%s\n"
                    projname))])
    (string-join
     strings
     "\n\n")))

