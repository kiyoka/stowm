;; #-*- mode: nendo; syntax: scheme -*-;;
;; main program of stowm

(define (display-help)
  (print "")
  (print "Usage: ")
  (print "  1. stowm install   [num]             ... enable  installed program. (stow -R)")
  (print "  2. stowm unisntall [num]             ... disable installed program. (stow -D)")
  (print "  3. stowm           URL of tar.gz     ... fetch, setup specfile, build program.")
  (print "  4. stowm           xxx.tar.gz        ... setup specfile, build program.")
  (print "  5. stowm restow    [proj]            ... restow installed program. (stow -R)")
  (print "     stowm restow    [num]             ... restow installed program. (stow -R)")
  (print "  6. stowm list      [proj]            ... display installed program list.")
  (print "  7. stowm env                         ... display stowm environment.")
  (print ""))


(define (pickup-package path)
  (cond
   ((stowm-regex-match "/stow/([^/]+)" path)
    => second)
   (else
    #f)))

;; return:
;;   ( (package1 . symlink-file1) (package2 . symlink-file2) ... )
(define (get-installed-alist local stow-home)
  (let1 script (sprintf "find %s -type l | grep -v %s > /tmp/stowm.cache\n" local stow-home)
    (stowm-exec-sh script)
    (with-open "/tmp/stowm.cache"
               (lambda (f)
                 (let* ((froms
                         (map
                          (lambda (line)
                            (line.chomp))
                          (f.readlines.to_list)))
                        (link-alist
                         (filter-map
                          (lambda (fn)
                            (let1 link (pickup-package (File.readlink fn))
                              (and link
                                   (cons link fn))))
                          froms)))
                   link-alist)))))

;; return:
;; (
;;   ;; (package-name installed? stowed? exist in repos?)
;;   (package1 i s p 0)
;;   (package2 #f #f #f 0)
;;    .
;;    .
;; )
(define (get-stowed-list home-repos stow-home link-alist)
  (let* ((projs       (stowm-get-dir-entries home-repos))
         (projs-hash  (apply hash-table eq?
                             (map (lambda (x) (cons x #t))
                                  projs)))
         (stowed      (stowm-get-dir-entries stow-home))
         (stowed-hash (apply hash-table eq?
                             (map (lambda (x) (cons x #t))
                                  stowed)))
         (all         (sort (delete-duplicates (append projs stowed))))
         (installed-hash (alist->hash-table link-alist)))
    (map
     (lambda (x cnt)
       (cons x ;; package-name like "ruby-2.1.3"
             (list
              (if (hash-table-exist? stowed-hash x)
                  (if (hash-table-exist? installed-hash x) 'i false) ;; installed?
                  false)
              (if (hash-table-exist? stowed-hash x) 's false)        ;; stowed?
              (if (hash-table-exist? projs-hash  x) 'p false)        ;; exist in repos??
              cnt)))
     all
     (range (length all)))))

;; rebuild ~/.stowm.db
(define (save-installed-db env)
  (let* ([link-alist  (get-installed-alist (local env) (stow-home env))]
         [stowed-list (get-stowed-list (home-repos env) (stow-home env) link-alist]])
    (printf "Info: rebuild [%s]\n" (db-path env))
    (with-open (db-path env)
               (lambda (f)
                 (pretty-print stowed-list f))
               "w"))
  0)

;; rebuild latest installed db info.
(define (rebuild-installed-db env)
  (when (or
         (not (File.exist? (db-path env)))
         (let ([stow-home-fs (File::Stat.new (stow-home env))]
               [db-fs        (File::Stat.new (db-path env))])
           (<
            (db-fs.mtime.to_i)
            (stow-home-fs.mtime.to_i)))
         (let ((local-bin-fs (File::Stat.new (bin     env))]
               [db-fs        (File::Stat.new (db-path env))])
           (<
            (db-fs.mtime.to_i)
            (local-bin-fs.mtime.to_i))))
    (save-installed-db env))
  (with-open (db-path env)
             (lambda (f)
               (read f))))



(define (display-list stowed-list keyword)
  (define (ox bool-val)
    (if bool-val "O" "-"))
  (define _format_h "        %-35s %11s %11s\n")
  (define _format_d "   %3d) %-35s %11s %11s\n")

  (let1 lst
      (if keyword
          (filter
           (lambda (x)
             (stowm-regex-match keyword (car x)))
           (stowed-list-to-tree stowed-list))
          (stowed-list-to-tree stowed-list))
  
    (print
     (apply +
            (cons
             (sprintf _format_h "       <name>" "<enabled>" "<installed>")
             (map
              (lambda (tree)
                (apply +
                       (cons
                        (sprintf " %s \n" (car tree))
                        (map
                         (lambda (x)
                           (sprintf _format_d
                                    (fifth x)
                                    (+ " " (first x))
                                    (ox (second x))
                                    (ox (third x))))
                         (cdr tree)))))
              lst))))))


(define (stowm-restow stow-home local target delete-item restow-item)
  (let1 script (string-join
                (list
                 (sprintf "cd %s" target)
                 (if (null? delete-item)
                     ""
                     (echo-str (sprintf "%s %s -D %s" (car stow-program) (cdr stow-program) (car delete-item))))
                 (if (null? restow-item)
                     ""
                     (echo-str (sprintf "%s %s -R %s" (car stow-program) (cdr stow-program) (car restow-item))))
                 "")
                "\n")
    (exec-sh script)
    (save-installed-info stow-home local target)))


(define (action-by-url env url)
  (let* ([parsed (stowm-parse-url url)]
         [specfile-str
          (create-specfile (stow-home env) url)]
         [specfile-dir
          (+ (home-repos env) "/" (package parsed))]
         [specfile-path
          (+ specfile-dir "/" (package parsed) ".yml")])

    ;; create directory
    (when (not (File.exist? specfile-dir))
      (Dir.mkdir specfile-dir))

    ;; save specfile
    (with-open
     specfile-path
     (lambda (f)
       (f.printf "%s" specfile-str)
       (STDERR.printf "Info : created spec [%s] \n" specfile-path))
     "w")))


(define (action-by-keyword env keyword number)

  (let* ((delete-action (equal? "uninstall" keyword))
         (lst (get-installed-info env))
         ;; ----------
         ;; search the number in list
         ;; ----------
         (found
          (filter
           (lambda (x)
             (= number (sixth x)))
           lst)))
    (if (null? found)
        (begin
          (printf "Error: selected number [%d] was not found...\n" number)
          (exit 1))
        (let* ((basename (fifth (car found)))
               (tree (stowed-list-to-tree lst))
               (selection (assv-ref basename tree)))
          (let ((delete-item
                 (filter-map
                  (lambda (x)
                    (if (= 'i (second x))
                        (car x)
                        nil))
                  selection))
                (restow-item
                 (filter-map
                  (lambda (x)
                    (if (and (= 's (third x))
                             (= number (sixth x)))
                        (car x)
                        nil))
                  selection)))
            (cond
             ((null? restow-item)
              (printf "Error: selected number [%d] was not installed yet. \n" number)
              (exit 1))
             (delete-action
              (stowm-restow (assq-ref 'stow-home env) (assq-ref 'local env) (assq-ref 'target env) delete-item '()))
             ((equal? delete-item restow-item)
              (printf "Info: restow [%s] again.\n" (car restow-item))
              (stowm-restow (assq-ref 'stow-home env) (assq-ref 'local env) (assq-ref 'target env) delete-item restow-item))
             (else
              (stowm-restow (assq-ref 'stow-home env) (assq-ref 'local env) (assq-ref 'target env) delete-item restow-item))))))))

(define (main argv)
  ;; branch by argument
  (let1 env (stowm-get-default-env)

    ;; load dotfiles
    (if (File.exist? (inifile-path env))
        (load (inifile-path env)))
    
    ;; home-repos exist check
    (if (not (Dir.exist? (home-repos env)))
        (begin
          (STDERR.printf "Error : repos dir [%s] nessesary to use stowm.\n" (home-repos env))
          (exit 1)))

    (let1 stowed-list (rebuild-installed-db env)

      (case (length argv)
        ((0)
         (display-help)
         0)
        (else
         (cond
          ((stowm-regex-match #/en?v?$/                (car argv))
           (print (stowm-env-to-string env)))
          ((stowm-regex-match #/^in?s?t?a?l?l?$/       (car argv))
           (action-by-keyword env 'install            (to-i (second argv))))
          ((stowm-regex-match #/^u?n?i?n?s?t?a?l?l?$/  (car argv))
           (action-by-keyword env 'uninstall          (to-i (second argv))))
          ((is-valid-url?                              (car argv))
           (action-by-url env (car argv)))
          ((stowm-regex-match #/^li?s??t?$/            (car argv))
           (cond
            ((< 1 (length argv))
             (display-list stowed-list (second argv)))
            (else
             (display-list stowed-list #f))))
          (else
           (display-help)
           0)))))))

;; ----------------------------------------
;; utility for user's "specfile" file.
;; ----------------------------------------
(define stowspec nil)
(define (define-stowspec alist)
  (set! stowspec alist))
(define uname 
  (let1 f (IO.popen "uname" "r+")
    f.readline.chop))
