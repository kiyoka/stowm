#!/usr/bin/env ruby
# -*- mode: nendo; syntax: scheme ; coding: utf-8 -*-
require 'nendo'
$LOAD_PATH.push( File.dirname(__FILE__) + "/../lib" )
core = Nendo::Core.new()
core.setArgv( ARGV )
core.loadInitFile
core.disableRuntimeCheck( )
core.evalStr( <<";;END-OF-SCRIPT" )
;;;
;;; stowm - a package management tool for GNU stow
;;;  
;;;   Copyright (c) 2014  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
(use srfi-1)
(use srfi-9)
(use util.list)
(use stowm.env)
(use stowm.util)
(use stowm.parseutil)
(use stowm.listutil)
(use stowm.specfile)
(use stowm.main)

(define (main argv)
  ;; branch by argument
  (let1 env (stowm-get-default-env)

    ;; load dotfiles
    (if (File.exist? (inifile-path env))
        (load (inifile-path env)))
    
    ;; home-repos exist check
    (if (not (Dir.exist? (home-repos env)))
        (begin
          (STDERR.printf "Error : repos dir [%s] nessesary to use stowm.\n" (home-repos env))
          (exit 1)))

    (let1 stowed-list (rebuild-installed-db env)

      (case (length argv)
        ((0)
         (display-help)
         0)
        (else
         (cond
          ((stowm-regex-match #/^env/                  (car argv))
           (print (stowm-env-to-string env)))
          ((stowm-regex-match #/^ena?b?l?e?/           (car argv))
           (cond
            ((stowm-regex-match #/^[0-9]+$/            (second argv))
             (action-by-keyword-num  env 'enable       (to-i (second argv)) stowed-list))
            (else
             (action-by-keyword-name env 'enable       (second argv) stowed-list))))
          ((stowm-regex-match #/^dis?a?b?l?e?/         (car argv))
           (cond
            ((stowm-regex-match #/^[0-9]+$/            (second argv))
             (action-by-keyword-num  env 'disable      (to-i (second argv)) stowed-list))
            (else
             (action-by-keyword-name env 'disable      (second argv) stowed-list))))
          ((stowm-regex-match #/^reb?u?i?l?d?/         (car argv))
           (rebuild-num  env                           (to-i (second argv)) stowed-list))
          ((is-valid-url?                              (car argv))
           (action-by-url env (car argv)))
          ((stowm-regex-match #/^li?s??t?$/            (car argv))
           (cond
            ((< 1 (length argv))
             (display-list stowed-list (second argv)))
            (else
             (display-list stowed-list #f))))
          (else
           (display-help)
           0)))))))


(main *argv*)
;;END-OF-SCRIPT
