#!/bin/sh
true; #-*- mode: nendo; syntax: scheme -*-;;
true; exec /usr/local/bin/nendo $0 $*

(define archive-file-pattern "([a-zA-Z].*)")
(define stow-home   (File.expand_path "~/stowspec"))
(define stow-target "/usr/local/stow")
(define stow-bin    "/usr/local/bin")
(define stow-temp   "/tmp/stowspec")

;; `regex' is a string ( not a regex object )
;; returns ( $0-string  $1-string  $2-string  $3-string ... )
(define (regex-match regex str)
  (let1 matchdata ((. str match) regex)
    (if matchdata
        (matchdata.to_a.to_list)
        nil)))

;; test
;;(regex-match "^[a-z]+$" "abc")
;;(regex-match "^([a-z]+)([0-9]+)$" "abc123")


(define (exec-sh script)
  (let1 tmpfile "/tmp/stowspec_script.sh"
    (with-open
     tmpfile
     (lambda (f)
       (f.puts script))
     "w")
    (print "---BEGIN---")
    (display script)
    (.system (+ "bash " tmpfile))
    (print "---END---")))



(define (tgz-to-name tgz)
  (cond
   ((regex-match (+ "^.+[/]" archive-file-pattern "(.tar.gz|.tgz|.tar.bz2)$") tgz)
    => second)
   ((regex-match (+ "^"   archive-file-pattern "(.tar.gz|.tgz|.tar.bz2)$") tgz)
    => second)
   (else
    nil)))

;; test
(when false
  (list
   (tgz-to-name "abc-1.2.3.tar.gz")
   (tgz-to-name "abc-1.2.3.tar.bz2")
   (tgz-to-name "abc-1.2.3.tgz")
   (tgz-to-name "file.txt")
   (tgz-to-name "http://ftp.gnu.org/gnu/wget/wget-1.9.tar.gz")
   ))


(define (get-envs)
  (let* ((pwd (ENV.fetch "PWD"))
         (in-project
          (cond
           ((regex-match (+ "^" stow-home "/" archive-file-pattern "$") pwd)
            => second)
           (else
            nil))))
    `(
      (pwd         . ,pwd)                  ;; pwd
      (home        . ,(ENV.fetch "HOME"))   ;; "/home/xxxx/"
      (stow-home   . ,stow-home)            ;; "/home/xxxx/stowspec"
      (target      . ,stow-target)          ;; "/usr/local/stow"
      (bin         . ,stow-bin)             ;; "/usr/local/bin"
      (temp        . ,stow-temp)            ;; "/tmp/stowspec"
      (project     . ,in-project)           ;; nil or "aaaa-1.2.3.tar.gz"
      )))


(define (get-curdir-info envs)
  (let1 pwd (assq-ref 'pwd  envs)
    (cond
     ((assq-ref 'project envs)
      => (lambda (x)
           `(specdir . x)))
     (else
      `(other . "")))))


(define assoc-to-local
  (macro (_assoc name)
    `(,name (assq-ref (quote ,name) ,_assoc))))

;; test
(when false
  (let1 _aaa '((filename . "FILENAME")
               (projname . "PROJNAME")
               (url      . nil))
    (pretty-print
     (macroexpand
      '(let
           (
            (assoc-to-local _aaa filename)
            (assoc-to-local _aaa projname)))))
    (let
        (
         (assoc-to-local _aaa filename)
         (assoc-to-local _aaa projname))
      (+ filename ":" projname))))
      

(define (gen-script envs project-envs spec)
  (let* ((_ (append envs project-envs))
         (assoc-to-local _ projname)
         (assoc-to-local _ projpath)
         (assoc-to-local _ arc)
         (assoc-to-local _ workdir)
         (assoc-to-local _ url))
    (begin
      `(
        (store . ,(string-join
                   (list
                    (sprintf "mkdir -p %s" projpath)
                    (if url
                        (sprintf "wget -O %s/%s %s"      projpath arc url)
                        (sprintf "/bin/cp %s %s"         arc projpath))
                    (sprintf "cd %s" projpath)
                    "")
                   "\n"))
        (build . ,(string-join
                   (list
                    (sprintf "/bin/rm -rf %s/%s" workdir projname)
                    (sprintf "mkdir -p %s" workdir)
                    (sprintf "/bin/cp -f %s %s" arc workdir)
                    (sprintf "cd %s" workdir)
                    (sprintf "tar zxf %s" arc)
                    (sprintf "cd ./%s"    projname)
                    (assq-ref 'conf       spec)
                    (assq-ref 'make       spec)
                    (assq-ref 'install    spec)
                    "")
                   "\n"))
        (stowspec . ,(string-join
                      (list
                       (sprintf "cd %s" projpath)
                       "stowspec"
                       "")
                      "\n"))
        ))))


(define (get-dir-entries path)
  (filter
   (lambda (x)
     (not (or (x.match "[/]?[.]$")
              (x.match "[/]?[.][.]$")
              (x.match "^[.]"))))
   (to-list (Dir.entries path))))

;;(get-dir-entries "/usr/local/stow")


(define (get-linklist envs)
  (let* ((bin-path (assq-ref 'bin envs))
         (bin-list
          (map
           (lambda (x)
             (+ bin-path "/" x))
           (get-dir-entries bin-path))))
    (filter-map
     (lambda (x)
       (when (File.symlink? x)
         (File.readlink x)))
     bin-list)))
  

;; check installed binary file by stow.
(define (binary-installed? envs linklist projname)
  (if (not projname)
      false
      ;; checking installed file counts.
      (< 0 (length
            (filter
             (lambda (x)
               (regex-match projname x))
             linklist)))))


(define (get-stowed-list envs)
  (let* ((projs    (get-dir-entries (assq-ref 'stow-home envs)))
         (stowed   (get-dir-entries (assq-ref 'target envs)))
         (all      (uniq (sort (append projs stowed))))
         (linklist (get-linklist envs)))
    (map
     (lambda (x)
       (cons x
             (list
              (if (binary-installed? envs linklist x) 'i false)
              (if (memv x stowed) 's false)
              (if (memv x projs ) 'p false))))
     all)))

(when false
  (get-stowed-list
   '(
     (pwd . "/Volumes/CaseSensitive/kiyoka/work/github/nendo/sample")
     (home . "/Users/kiyoka")
     (stow_home . "/Users/kiyoka/stowspec")
     (target . "/usr/local/stow")
     (bin . "/usr/local/bin")
     (temp . "/tmp/stowspec")
     (project))))


(define (action-by-curdir envs)
  (define (ox bool-val)
    (if bool-val "O" "-"))

  (let1 curdir-info (get-curdir-info envs)
    (cond
     ((eq? 'specdir (car curdir-info))
      ;; ----------
      ;; build!
      ;; ----------
      (if (not (File.exist? "./specfile"))
          (begin
            (print "Error: ./specfile does not exist...")
            (exit 1))
          (let* ((spec (with-open "./specfile"
                                  (lambda (f)
                                    (read f))))
                 (project-envs (get-project-envs envs
                                                 (assq-ref 'projname spec)
                                                 (assq-ref 'arc      spec)
                                                 (assq-ref 'url      spec))))
            (exec-sh
             (assq-ref 'build (gen-script
                               envs
                               project-envs
                               spec))))))
     (else
      ;; ----------
      ;; show current stowed status
      ;; ----------
      (let1 _format "%-25s %10s %10s %10s"
        (print
         (string-join
          (cons
           (sprintf _format "        <name>" "<installed>" "<stowed>" "<source>")
           (map
            (lambda (x)
              (sprintf _format
                       (+ " " (first x))
                       (ox (second x))
                       (ox (third x))
                       (ox (fourth x))))
            (get-stowed-list envs)))
          "\n"))))
     )))



(define (get-project-envs envs projname arc url)
  (let1 projpath (+ (assq-ref 'stow-home envs) "/" projname)
    `(
      (projname . ,projname)
      (projpath . ,projpath)
      (workdir  . ,(sprintf "%s/%s" (assq-ref 'temp envs) projname))
      (arc      . ,arc)
      (url      . ,url)
      (specfile . ,(+ projpath "/specfile")))))


(define (action-by-arg envs argv)
  (let* ((m1 (regex-match (+ "^http://.+/" archive-file-pattern "$") (car argv)))
         (m2 (regex-match (+ "^" archive-file-pattern "$") (car argv)))
         (url      (if m1 (car m1) nil))
         (arc      (if m1 (second m1)
                       (if m2 (car m2) nil)))
         (projname (or (tgz-to-name arc) "")))
    (let* ((project-envs (get-project-envs envs projname arc url))
           (assoc-to-local project-envs workdir)
           (assoc-to-local project-envs specfile)
           (assoc-to-local project-envs projpath))
      (if (or url arc)
          (begin
            (printf "url      = %s\n" url)
            (printf "arc      = %s\n" arc)
            (printf "projname = %s\n" projname)
            (printf "workdir  = %s\n" workdir)
            (printf "specfile = %s\n" specfile)
            (let* ((scripts  (gen-script envs project-envs '())))
              (exec-sh (assq-ref 'store scripts))
              (printf "Info: specfile = %s\n" specfile)
              (printf "cd %s\n" projpath)
              (with-open specfile
                         (lambda (f)
                           (f.puts ";;-*- mode: scheme; syntax: scheme -*-;;")
                           (f.puts "(")
                           (for-each
                            (lambda (x)
                              (f.puts (+ " " (write-to-string x))))
                            `((conf      . ,(sprintf "./configure --prefix=%s/%s " (assq-ref 'target envs) projname))
                              (make      . "make")
                              (install   . "make install")
                              (arc       . ,arc)
                              (url       . ,url)
                              (projname  . ,projname)))
                           (f.puts ")"))
                         "w")
              (exec-sh (assq-ref 'stowspec scripts))))
          (begin
            (print "Error: please specify url by argument.")
            (exit 1))))))
          
;; test
;;(action-by-arg '("a.tar.gz"))
;;(action-by-arg '("http://www.example.com/a.tar.gz"))

(define (main argv)
  (let1 envs (get-envs)
    (case (length argv)
      ((0)
       (action-by-curdir envs))
      (else
       (action-by-arg    envs argv)))))
  
(main (cdr ARGV.to_list))
